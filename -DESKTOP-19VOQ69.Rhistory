darkblotched <- read_table(here("data", "darkblotched_2017.txt"))
dover_sole <- read_table(here("data", "dover_sole_2021.txt"))
kelp_greenling <- read_table(here("data", "kelp_greenling_2015.txt"))
lingcod_n <- read_table(here("data", "lingcod_north_2021.txt"))
lingcod_s <- read_table(here("data", "lingcod_south_2021.txt"))
petrale_sole <- read_table(here("data", "petrale_sole_2019.txt"))
sablefish <- read_table(here("data", "sablefish_2021.txt"))
splitnose <- read_table(here("data", "splitnose_2009.txt"))
widow <- read_table(here("data", "widow_2019.txt"))
yelloweye <- read_table(here("data", "yelloweye_2017.txt"))
snames <- c("aurora", "black_ca", "black_wa", "bocaccio", "cabezon_ncs", "cabezon_ors", "cabezon_scs",
"canary", "chilipepper", "darkblotched", "dover_sole", "kelp_greenling", "lingcod_n", "lingcod_s",
"petrale_sole", "sablefish", "splitnose", "widow", "yelloweye")
remove_excess <- function(df){
name <- deparse(substitute(df))
df <- df %>%
select(Area, Yr, Era, SpawnBio, Recruit_0) %>%
add_column(stock_name = name)
return(df)
}
aurora <- remove_excess(aurora)
black_ca <- remove_excess(black_ca)
black_wa <- remove_excess(black_wa)
bocaccio <- remove_excess(bocaccio)
cabezon_ncs <- remove_excess(cabezon_ncs)
cabezon_ors <- remove_excess(cabezon_ors)
cabezon_scs <- remove_excess(cabezon_scs)
canary <- remove_excess(canary)
chilipepper <- remove_excess(chilipepper)
darkblotched <- remove_excess(darkblotched)
dover_sole <- remove_excess(dover_sole)
kelp_greenling <- remove_excess(kelp_greenling)
lingcod_n <- remove_excess(lingcod_n)
lingcod_s <- remove_excess(lingcod_s)
petrale_sole <- remove_excess(petrale_sole)
sablefish <- remove_excess(sablefish)
splitnose <- remove_excess(splitnose)
widow <- remove_excess(widow)
yelloweye <- remove_excess(yelloweye)
library(tidyverse)
library(here)
aurora <- read_table(here("data", "aurora_2013.txt"))
black_ca <- read_table(here("data", "black_ca_2015.txt"))
black_wa <- read_table(here("data", "black_wa_2015.txt"))
bocaccio <- read_table(here("data", "bocaccio_2017.txt"))
cabezon_ncs <- read_table(here("data", "cabezon_ncs_2019.txt"))
cabezon_ors <- read_table(here("data", "cabezon_ors_2019.txt"))
cabezon_scs <- read_table(here("data", "cabezon_scs_2019.txt"))
canary <- read_table(here("data", "canary_2015.txt"))
chilipepper <- read_table(here("data", "chilipepper_2015.txt"))
darkblotched <- read_table(here("data", "darkblotched_2017.txt"))
dover_sole <- read_table(here("data", "dover_sole_2021.txt"))
kelp_greenling <- read_table(here("data", "kelp_greenling_2015.txt"))
lingcod_n <- read_table(here("data", "lingcod_north_2021.txt"))
lingcod_s <- read_table(here("data", "lingcod_south_2021.txt"))
petrale_sole <- read_table(here("data", "petrale_sole_2019.txt"))
sablefish <- read_table(here("data", "sablefish_2021.txt"))
splitnose <- read_table(here("data", "splitnose_2009.txt"))
widow <- read_table(here("data", "widow_2019.txt"))
yelloweye <- read_table(here("data", "yelloweye_2017.txt"))
snames <- c("aurora", "black_ca", "black_wa", "bocaccio", "cabezon_ncs", "cabezon_ors", "cabezon_scs",
"canary", "chilipepper", "darkblotched", "dover_sole", "kelp_greenling", "lingcod_n", "lingcod_s",
"petrale_sole", "sablefish", "splitnose", "widow", "yelloweye")
remove_excess <- function(df){
name <- deparse(substitute(df))
df <- df %>%
select(Area, Yr, Era, SpawnBio, Recruit_0) %>%
add_column(stock_name = name)
return(df)
}
aurora <- remove_excess(aurora)
black_ca <- remove_excess(black_ca)
black_wa <- remove_excess(black_wa)
bocaccio <- remove_excess(bocaccio)
cabezon_ncs <- remove_excess(cabezon_ncs)
cabezon_ors <- remove_excess(cabezon_ors)
cabezon_scs <- remove_excess(cabezon_scs)
canary <- remove_excess(canary)
chilipepper <- remove_excess(chilipepper)
darkblotched <- remove_excess(darkblotched)
dover_sole <- remove_excess(dover_sole)
kelp_greenling <- remove_excess(kelp_greenling)
lingcod_n <- remove_excess(lingcod_n)
lingcod_s <- remove_excess(lingcod_s)
petrale_sole <- remove_excess(petrale_sole)
sablefish <- remove_excess(sablefish)
splitnose <- remove_excess(splitnose)
widow <- remove_excess(widow)
yelloweye <- remove_excess(yelloweye)
arrowtooth_flounder_bsai <- read_csv(here("data", "arrowtooth_flounder_bsai.csv"))
View(arrowtooth_flounder_bsai)
atka_mackerel_bsai <- read_csv(here("data", "atka_mackerel_bsai.csv"))
blackspotted_rougheye_bsai <- read_csv(here("data", "blackspotted_rougheye_bsai.csv"))
blackspotted_rougheye_goa <- read_csv(here("data", "blackspotted_rougheye_goa.csv"))
dusky_goa <- read_csv(here("data", "dusky_goa.csv"))
greenland_turbot <- read_csv(here("data", "greenland_turbot.csv"))
kamchatka_flounder <- read_csv(here("data", "kamchatka_flounder.csv"))
northern_rock_sole <- read_csv(here("data", "n_rock_sole.csv"))
ns_rock_sole_goa <- read_csv(here("data", "n_s_rock_sole_goa.csv"))
northern_rockfish_goa <- read_csv(here("data", "northern_rockfish_goa.csv"))
pacific_cod_ebs <- read_csv(here("data", "pacific_cod_ebs.csv"))
pacific_cod_goa <- read_csv(here("data", "pacific_cod_goa.csv"))
pollock_ebs <- read_csv(here("data", "pollock_ebs.csv"))
pollock_goa <- read_csv(here("data", "pollock_goa.csv"))
pop_bsai <- read_csv(here("data", "pop_bsai.csv"))
pop_goa <- read_csv(here("data", "pop_goa.csv"))
sablefish_alaska <- read_csv(here("data", "sablefish.csv"))
yellowfin_sole_bsai <- read_csv(here("data", "yellowfin_sole_bsai.csv"))
# list of alaska stocks
snames_alaska <- c("arrowtooth_flounder_bsai", "atka_mackerel_bsai", "blackspotted_rougheye_bsai", "blackspotted_rougheye_goa",
"dusky_goa", "greenland_turbot", "kamchatka_flounder", "northern_rock_sole", "ns_rock_sole_goa",
"northern_rockfish_goa", "pacific_cod_ebs", "pacific_cod_goa", "pollock_ebs", "pollock_goa",
"pop_bsai", "pop_goa", "sablefish_alaska", "yellowfin_sole_bsai")
add_name <- function(df){
name <- deparse(substitute(df))
df <- df %>%
add_column(stock_name = name)
return(df)
}
add_name(arrowtooth_flounder_bsai)
add_name(atka_mackerel_bsai)
add_name(blackspotted_rougheye_bsai)
add_name(blackspotted_rougheye_goa)
add_name(dusky_goa)
add_name(greenland_turbot)
add_name(kamchatka_flounder)
add_name(northern_rock_sole)
add_name(ns_rock_sole_goa)
add_name(northern_rockfish_goa)
add_name(pacific_cod_ebs)
add_name(pacific_cod_goa)
add_name(pollock_ebs)
add_name(pollock_goa)
add_name(pop_bsai)
add_name(pop_goa)
add_name(sablefish_alaska)
add_name(yellowfin_sole_bsai)
pdf("data/raw_recruitment_time_series_alaska.pdf")
for(i in snames){
df <- stocks %>% filter(stock_name == i)
ts_plot <- ggplot(df, aes(x = year, y = recruits)) + geom_line() +
xlab("year") + ylab("recruits") + ggtitle(i)
print(ts_plot)
}
dev.off()
alaska_stocks <- rbind(arrowtooth_flounder_bsai, atka_mackerel_bsai, blackspotted_rougheye_bsai, blackspotted_rougheye_goa,
dusky_goa, greenland_turbot, kamchatka_flounder, northern_rock_sole, ns_rock_sole_goa,
northern_rockfish_goa, pacific_cod_ebs, pacific_cod_goa, pollock_ebs, pollock_goa,
pop_bsai, pop_goa, sablefish_alaska, yellowfin_sole_bsai)
pdf("data/raw_recruitment_time_series_alaska.pdf")
for(i in snames){
df <- alask_stocks %>% filter(stock_name == i)
ts_plot <- ggplot(df, aes(x = year, y = recruits)) + geom_line() +
xlab("year") + ylab("recruits") + ggtitle(i)
print(ts_plot)
}
dev.off()
pdf("data/raw_recruitment_time_series_alaska.pdf")
for(i in snames){
df <- alaska_stocks %>% filter(stock_name == i)
ts_plot <- ggplot(df, aes(x = year, y = recruits)) + geom_line() +
xlab("year") + ylab("recruits") + ggtitle(i)
print(ts_plot)
}
dev.off()
add_name(arrowtooth_flounder_bsai)
View(arrowtooth_flounder_bsai)
arrowtooth_flounder_bsai <- add_name(arrowtooth_flounder_bsai)
atka_mackerel_bsai <- add_name(atka_mackerel_bsai)
blackspotted_rougheye_bsai <- add_name(blackspotted_rougheye_bsai)
blackspotted_rougheye_goa <- add_name(blackspotted_rougheye_goa)
dusky_goa <- add_name(dusky_goa)
greenland_turbot <- add_name(greenland_turbot)
kamchatka_flounder <- add_name(kamchatka_flounder)
northern_rock_sole <- add_name(northern_rock_sole)
ns_rock_sole_goa <- add_name(ns_rock_sole_goa)
northern_rockfish_goa <- add_name(northern_rockfish_goa)
pacific_cod_ebs <- add_name(pacific_cod_ebs)
pacific_cod_goa <- add_name(pacific_cod_goa)
pollock_ebs <- add_name(pollock_ebs)
pollock_goa <- add_name(pollock_goa)
pop_bsai <- add_name(pop_bsai)
pop_goa <- add_name(pop_goa)
sablefish_alaska <- add_name(sablefish_alaska)
yellowfin_sole_bsai <- add_name(yellowfin_sole_bsai)
alaska_stocks <- rbind(arrowtooth_flounder_bsai, atka_mackerel_bsai, blackspotted_rougheye_bsai, blackspotted_rougheye_goa,
dusky_goa, greenland_turbot, kamchatka_flounder, northern_rock_sole, ns_rock_sole_goa,
northern_rockfish_goa, pacific_cod_ebs, pacific_cod_goa, pollock_ebs, pollock_goa,
pop_bsai, pop_goa, sablefish_alaska, yellowfin_sole_bsai)
pdf("data/raw_recruitment_time_series_alaska.pdf")
for(i in snames){
df <- alaska_stocks %>% filter(stock_name == i)
ts_plot <- ggplot(df, aes(x = year, y = recruits)) + geom_line() +
xlab("year") + ylab("recruits") + ggtitle(i)
print(ts_plot)
}
dev.off()
pdf("data/raw_recruitment_time_series_alaska.pdf")
for(i in snames_alaska){
df <- alaska_stocks %>% filter(stock_name == i)
ts_plot <- ggplot(df, aes(x = year, y = recruits)) + geom_line() +
xlab("year") + ylab("recruits") + ggtitle(i)
print(ts_plot)
}
dev.off()
years <- tibble(stock_names = snames,
min_yr = c(1963, 1963, 1963, 1960, 1962, 1980, 1975, 1960, 1966, 1975, 1975, 1980, 1960, 1970,
1950, 1960, 1975, 1965, 1960),
max_yr = c(2012, 2014, 2014, 2015, 2018, 2018, 2018, 2014, 2014, 2016, 2020, 2014, 2020, 2020,
2018, 2020, 2008, 2018, 2016))
# identify stocks with regime changes -------------------------------------
library(changepoint)
View(chilipepper)
example_chilipepper <- chilipepper %>%
filter(Yr >= 1966) %>%
filter(Yr <= 2014)
View(example_chilipepper)
fit <- cpt.mean(example_chilipepper$Recruit_0, method = "PELT", test.stat="Normal",penalty="AIC",minseglen=6)
fit
fit@cpttype
fit@cpts
fit <- cpt.mean(log(example_chilipepper$Recruit_0), method = "PELT", test.stat="Normal",penalty="AIC",minseglen=6)
fit@cpts
years
years$min_yr - years$max_yr
years$max_yr - years$min_yr
PELT_fit <- function(df, min, max){
df <- df %>% filter(Yr >= min) %>% filter(Yr <= max)
fit <- cpt.mean(log(df$Recruit_0), method = "PELT", test.stat = "Normal", penalty = "AIC", minseglen = 6)
return(fit@cpts)
}
bocaccio_fit <- PELT_fit(bocaccio, 1960, 2015)
bocaccio_fit
install.packages("rEDM")
# Practice simplex EDM with bocaccio
library(rEDM)
bocaccio <- bocaccio %>%
filter(Yr >= 1960) %>%
filter(Yr <= 2015)
plot(bocaccio$Yr, bocaccio$Recruit_0)
plot(bocaccio$Yr, bocaccio$Recruit_0, type = "l")
ts <- bocaccio$Recruit_0
str(ts)
lib <- c(1, 40)
pred <- c(41, 56)
simplex_output <- simplex(ts, lib, pred)
str(simplex_output)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)")
simplex_output$rho
simplex_output2 <- simplex(ts, lib, pred, E = 9, tp = 1:10)
simplex_output2 <- simplex(ts, lib, pred, E = 9, tp = 1:5)
simplex_output2 <- simplex(ts, lib, pred, E = 9)
plot(simplex_output2$tp, simplex_output2$rho, type = "l",
xlab = "Time to Prediction (E)", ylab = "Forecast Skill (rho)")
simplex_output2$tp
simplex_output2 <- simplex(ts, lib, pred, E = 9, tp = 1:2)
lib <- c(1, 30) # training data
pred <- c(31, 56) # test data
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") # peak of rho is with 9 embedding dimensions (??)
simplex_output2 <- simplex(ts, lib, pred, E = 8, tp = 1:2)
simplex_output2 <- simplex(ts, lib, pred, E = 8, tp = 2)
?simplex
lib <- c(1, 30) # training data
pred <- c(31, 40) # test data
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") # peak of rho is with 9 embedding dimensions (??)
simplex_output2 <- simplex(ts, lib, pred, E = 8, tp = 1:10)
simplex_output2 <- simplex(ts, lib, pred, E = 8, tp = 10)
plot(simplex_output2$tp, simplex_output2$rho, type = "l",
xlab = "Time to Prediction (E)", ylab = "Forecast Skill (rho)")
lib <- c(1, 30) # training data
pred <- c(41, 56) # test data
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") # peak of rho is with 9 embedding dimensions (??)
lib <- c(1, 40) # training data
pred <- c(41, 56) # test data
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") # peak of rho is with 9 embedding dimensions (??)
simplex_output2 <- simplex(ts, lib, pred, E = 5, tp = 1)
lib <- c(1, 20) # training data
pred <- c(21, 30) # test data
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") # peak of rho is with 9 embedding dimensions (??)
simplex_output2 <- simplex(ts, lib, pred, E = 4, tp = 1:10)
plot(simplex_output2$tp, simplex_output2$rho, type = "l",
xlab = "Time to Prediction (E)", ylab = "Forecast Skill (rho)")
simplex_output2 <- simplex(ts, lib, pred, E = 4, tp = 1:5)
simplex_output2 <- simplex(ts, lib, pred, E = 4, tp = c(1,2,3,4,5))
data(tentmap_del)
data("TentMap")
str(TentMap)
ts2 <- TentMap$TentMap
lib2 <- c(1,100)
pred2 <- c(201,500)
outs <- simplex(ts2, lib2, pred2)
str(outs)
plot(outs$E, outs$rho)
outs <- simplex(ts2, lib2, pred2, E = 2, tp = 1:10)
outs <- simplex(ts2, lib2, pred2, E = 2, tp = 10)
outs$tp
outs$rho
# Practice simplex EDM with bocaccio
library(rEDM)
library(tidyverse)
library(here)
# NN Simplex Forecasting --------------------------------------------------
# going to follow the example from the package tutorial with bocaccio data
bocaccio <- read_table(here("data", "bocaccio_2017.txt"))
bocaccio <- bocaccio %>%
select(Area, Yr, Era, SpawnBio, Recruit_0) %>%
filter(Yr >= 1960) %>%
filter(Yr <= 2015) # remove model run in time
View(bocaccio)
plot(bocaccio$Yr, bocaccio$Recruit_0, type = "l")
ts <- bocaccio$Recruit_0 # recruitment time series
str(ts)
lib <- c(1, length(ts)) # training data
pred <- c(1, length(ts)) # test data
simplex_output <- simplex(ts, lib, pred)
str(simplex_output)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") # peak of rho is with 9 embedding dimensions (??)
simplex_output$rho
# next we test for nonlinearity - if the forecast skill is better when theta > 0, a sign of nonlinearity
smap_output <- list(s_map(ts, lib, pred, E = 2, silent = TRUE), s_map(ts, lib, pred, E = 7, silent = TRUE))
plot(smap_output[[1]]$theta, smap_output[[1]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
plot(smap_output[[2]]$theta, smap_output[[2]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
smap_output[[1]]$rho
# NN Simplex Forecasting Test 2 ------------------------------------------------------------------
# I want to repeat this with only a portion of the data
n <- nrow(ts)
lib <- c(1, floor(2/3*n)) # training data
# NN Simplex Forecasting Test 2 ------------------------------------------------------------------
# I want to repeat this with only a portion of the data (2/3 for training, 1/3 for test)
n <- length(ts)
lib <- c(1, floor(2/3*n)) # training data
pred <- c(floor(2/3*n)+1, n) # test data
simplex_output <- simplex(ts, lib, pred)
str(simplex_output)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") #
simplex_output$rho
lib <- c(1, floor(3/4*n)) # training data
pred <- c(floor(3/4*n)+1, n) # test data
simplex_output <- simplex(ts, lib, pred)
str(simplex_output)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") #
simplex_output$rho
# next we test for nonlinearity - if the forecast skill is better when theta > 0, a sign of nonlinearity
smap_output <- list(s_map(ts, lib, pred, E = 1, silent = TRUE), s_map(ts, lib, pred, E = 10, silent = TRUE))
plot(smap_output[[1]]$theta, smap_output[[1]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
plot(smap_output[[2]]$theta, smap_output[[2]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
lib <- c(1, floor(3/4*n)) # training data
pred <- c(floor(3/4*n)+1, floor(3/4*n)+3) # test data
simplex_output <- simplex(ts, lib, pred)
str(simplex_output)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") #
simplex_output$rho
# next we test for nonlinearity - if the forecast skill is better when theta > 0, a sign of nonlinearity
smap_output <- list(s_map(ts, lib, pred, E = 3, silent = TRUE), s_map(ts, lib, pred, E = 10, silent = TRUE))
plot(smap_output[[1]]$theta, smap_output[[1]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
plot(smap_output[[2]]$theta, smap_output[[2]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
simplex_output$mae
simplex_output <- simplex(log(ts), lib, pred)
str(simplex_output)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") #
simplex_output$rho
simplex_output$rmse
simplex_output <- simplex(ts, lib, pred)
str(simplex_output)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)") #
simplex_output$rho
# next we test for nonlinearity - if the forecast skill is better when theta > 0, a sign of nonlinearity
smap_output <- list(s_map(ts, lib, pred, E = 4, silent = TRUE), s_map(ts, lib, pred, E = 10, silent = TRUE))
plot(smap_output[[1]]$theta, smap_output[[1]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
plot(smap_output[[2]]$theta, smap_output[[2]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
# next we test for nonlinearity - if the forecast skill is better when theta > 0, a sign of nonlinearity
smap_output <- list(s_map(ts, lib, pred, E = 4, silent = TRUE), s_map(ts, lib, pred, E = 7, silent = TRUE),
s_map(ts, lib, pred, E = 10, silent = TRUE))
plot(smap_output[[1]]$theta, smap_output[[1]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
plot(smap_output[[2]]$theta, smap_output[[2]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
plot(smap_output[[3]]$theta, smap_output[[3]]$rho, type = "l", xlab = "Nonlinearity (theta)", ylab = "Forecast Skill (rho)")
# if I start with 3/4 of the data for training, and I predict 5 years concurrently, I need my loop to run 9 times
# note: would find a better way to do this later
for(i in 0:8){print(i)}
for(i in 0:8){
end_train <- floor(3/4*n) + i
lib <- c(1, end_train) # training data
pred <- c(end_train + 1, end_train + 5)
print(pred)
}
for(i in 0:9){
end_train <- floor(3/4*n) + i
lib <- c(1, end_train) # training data
pred <- c(end_train + 1, end_train + 5)
print(pred)
}
pred
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)",
main = pred)
for(i in 0:9){
end_train <- floor(3/4*n) + i
lib <- c(1, end_train) # training data
pred <- c(end_train + 1, end_train + 5) # test data
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)",
main = pred)
}
for(i in 0:9){
end_train <- floor(3/4*n) + i
lib <- c(1, end_train) # training data
pred <- c(end_train + 1, end_train + 5) # test data
simplex_output <- simplex(ts, lib, pred, E = 1:5)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)",
main = pred)
}
plot(bocaccio$Yr, bocaccio$Recruit_0, type = "l")
# so the issue with this is that the embedding dimension changes during each of the prediction periods
# Since we are interested in the idea of a moving window, what I will try next is to train the simplex
# model on 1/2 of the data, use 1/4 of the data to determine the embedding dimension, then predict the last 1/4 of the data
# moving window style
n <- length(ts)
lib <- c(1, floor(0.5*n))
pred <- c(floor(0.5*n) + 1, floor(3/4*n))
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)")
simplex_output$rho
i <- 0
end_train <- floor(3/4*n) + i
lib <- c(1, end_train) # training data
pred <- c(end_train + 1, end_train + 5) # test data
simplex_output <- simplex(ts, lib, pred, E = 3, stats_only = FALSE)
predictions <- na.omit(simplex_output$model_output[[1]])
predictions
plot(bocaccio$Yr, ts, type = "l", xlab = "year", ylab = "recruits")
lines(predictions$Index + 1960, predictions$Predictions, col = "blue", lty = 2)
# not sure if that is actually the method for Van Beveren going to try it slightly different
n <- length(ts)
lib <- c(1, n-20)
pred <- c(n-20+1, n-10)
simplex_output <- simplex(ts, lib, pred)
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)")
plot(simplex_output$E, simplex_output$rho, type = "l",
xlab = "Embedding Dimension (E)", ylab = "Forecast Skill (rho)")
simplex_output$rho
simplex_output <- simplex(ts, lib, pred, E = 5, stats_only = FALSE)
predictions <- na.omit(simplex_output$model_output[[1]])
plot(bocaccio$Yr, ts, type = "l", xlab = "year", ylab = "recruits")
lines(predictions$Index + 1960, predictions$Predictions, col = "blue", lty = 2)
polygon(c(predictions$Index + 1960, rev(predictions$Index + 1960)),
c(predictions$Predictions - sqrt(predictions$Pred_Variance),
rev(predictions$Predictions + sqrt(predictions$Pred_Variance))),
col = rgb(0, 0, 1, 0.5), border = NA)
lib2 <- c(1, n-10)
pred2 <- c(n-10+1, n)
output2 <- simplex(ts, lib2, pred2)
output2$rho
output2 <- simplex(ts, lib2, pred2, E = 1, stats_only = FALSE)
predictions2 <- na.omit(output2$model_output[[1]])
predictions2$Index
plot(bocaccio$Yr, ts, type = "l", xlab = "year", ylab = "recruits")
lines(predictions$Index + 1960, predictions$Predictions, col = "blue", lty = 2)
lines(predictions2$Index + 1960, predictions2$Predictions, col = "green", lty = 2)
polygon(c(predictions$Index + 1960, rev(predictions$Index + 1960)),
c(predictions$Predictions - sqrt(predictions$Pred_Variance),
rev(predictions$Predictions + sqrt(predictions$Pred_Variance))),
col = rgb(0, 0, 1, 0.5), border = NA)
polygon(c(predictions2$Index + 1960, rev(predictions2$Index + 1960)),
c(predictions2$Predictions - sqrt(predictions2$Pred_Variance),
rev(predictions2$Predictions + sqrt(predictions2$Pred_Variance))),
col = rgb(0, 1, 0, 0.5), border = NA)
sample1 <- rnorm(100, mean = 0, sd = 10)
hist(sample1)
sample1 <- rnorm(100, mean = 0, sd = 100)
hist(sample1)
sample1 <- rnorm(100, mean = 0, sd = 50)
hist(sample1)
sample1 <- rnorm(100, mean = 0, sd = 60)
hist(sample1)
sample1 <- rnorm(100, mean = 0, sd = 60)
hist(sample1)
sample1 <- rnorm(1000, mean = 0, sd = 60)
hist(sample1)
mean(-3, 8, 6, 4, 5)
(-3+8+6+4+5)/5
sample2 <- rnorm(1000, mean = 4, sd = 30)
hist(sample1)
hist(sample2)
sample1 <- rnorm(1000, mean = 0, sd = 0.0001)
hist(sample1)
sample1 <- rnorm(1000, mean = 0, sd = 60)
hist(sample1)
sample2 <- rnorm(1000, mean = 4, sd = 60)
hist(sample2)
sample2 <- rnorm(1000, mean = 4, sd = 50)
hist(sample2)
